<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [TrackedDevice\TrackedDevice.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image TrackedDevice\TrackedDevice.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060183: Last Updated: Tue Aug 02 03:18:22 2016
<BR><P>
<H3>Maximum Stack Usage =        552 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; CSensorFusion::Fuse(SensorData*) &rArr; CSensorFusion::MadgwickQuaternionUpdate(float, float, float, float, float, float, float, float, float, float) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[38]">ADC_DMAConvCplt</a> from stm32f1xx_hal_adc.o(i.ADC_DMAConvCplt) referenced from stm32f1xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[3a]">ADC_DMAError</a> from stm32f1xx_hal_adc.o(i.ADC_DMAError) referenced from stm32f1xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[39]">ADC_DMAHalfConvCplt</a> from stm32f1xx_hal_adc.o(i.ADC_DMAHalfConvCplt) referenced from stm32f1xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f1xx_it.o(i.BusFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from stm32f1xx_it.o(i.DMA1_Channel1_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f1xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from stm32f1xx_it.o(i.EXTI0_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from stm32f1xx_it.o(i.EXTI1_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from stm32f1xx_it.o(i.EXTI4_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from stm32f1xx_it.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f1xx_it.o(i.HardFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f1xx_it.o(i.MemManage_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f1xx_it.o(i.NMI_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f1xx_it.o(i.SysTick_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[36]">SystemInit</a> from system_stm32f1xx.o(i.SystemInit) referenced from startup_stm32f103xb.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f1xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[37]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f103xb.o(.text)
 <LI><a href="#[35]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[37]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(.text)
</UL>
<P><STRONG><a name="[e9]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[3b]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[57]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[ea]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[eb]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[ec]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[ed]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[ee]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetMicros()
</UL>

<P><STRONG><a name="[3e]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[ef]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[e7]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e4]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[41]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[f0]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[c9]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackedDevice_NRF24L01_Init()
</UL>

<P><STRONG><a name="[f2]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[e5]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[43]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSensorFusion::MadgwickQuaternionUpdate(float, float, float, float, float, float, float, float, float, float)
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[46]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSensorFusion::MadgwickQuaternionUpdate(float, float, float, float, float, float, float, float, float, float)
</UL>

<P><STRONG><a name="[47]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[db]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSensorFusion::Fuse(SensorData*)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSensorFusion::MadgwickQuaternionUpdate(float, float, float, float, float, float, float, float, float, float)
</UL>

<P><STRONG><a name="[48]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSensorFusion::MadgwickQuaternionUpdate(float, float, float, float, float, float, float, float, float, float)
</UL>

<P><STRONG><a name="[d8]"></a>__ARM_scalbnf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fscalb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSensorFusion::MadgwickQuaternionUpdate(float, float, float, float, float, float, float, float, float, float)
</UL>

<P><STRONG><a name="[f3]"></a>scalbnf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fscalb.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSensorFusion::MadgwickQuaternionUpdate(float, float, float, float, float, float, float, float, float, float)
</UL>

<P><STRONG><a name="[4d]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSensorFusion::MadgwickQuaternionUpdate(float, float, float, float, float, float, float, float, float, float)
</UL>

<P><STRONG><a name="[4e]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSensorFusion::MadgwickQuaternionUpdate(float, float, float, float, float, float, float, float, float, float)
</UL>

<P><STRONG><a name="[4f]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSensorFusion::Fuse(SensorData*)
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSensorFusion::MadgwickQuaternionUpdate(float, float, float, float, float, float, float, float, float, float)
</UL>

<P><STRONG><a name="[50]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSensorFusion::Fuse(SensorData*)
</UL>

<P><STRONG><a name="[da]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSensorFusion::MadgwickQuaternionUpdate(float, float, float, float, float, float, float, float, float, float)
</UL>

<P><STRONG><a name="[f4]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSensorFusion::Fuse(SensorData*)
</UL>

<P><STRONG><a name="[52]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[53]"></a>__aeabi_ul2f</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ffltul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_ul2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[54]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d9]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSensorFusion::Fuse(SensorData*)
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSensorFusion::MadgwickQuaternionUpdate(float, float, float, float, float, float, float, float, float, float)
</UL>

<P><STRONG><a name="[55]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSensorFusion::Fuse(SensorData*)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSensorFusion::MadgwickQuaternionUpdate(float, float, float, float, float, float, float, float, float, float)
</UL>

<P><STRONG><a name="[3f]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[f5]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[f6]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[45]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsqrt
</UL>

<P><STRONG><a name="[44]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2f
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[56]"></a>_fsqrt</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, fsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _fsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>

<P><STRONG><a name="[4c]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[4b]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[3c]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[f8]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>ADC_ConversionStop_Disable</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f1xx_hal_adc.o(i.ADC_ConversionStop_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_ConversionStop_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[38]"></a>ADC_DMAConvCplt</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32f1xx_hal_adc.o(i.ADC_DMAConvCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DMAConvCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[3a]"></a>ADC_DMAError</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f1xx_hal_adc.o(i.ADC_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[39]"></a>ADC_DMAHalfConvCplt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f1xx_hal_adc.o(i.ADC_DMAHalfConvCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DMAHalfConvCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[5d]"></a>ADC_Enable</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, stm32f1xx_hal_adc.o(i.ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.DMA1_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA1_Channel1_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI0_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI1_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI4_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI9_5_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 346 bytes, Stack size 24 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init()
</UL>

<P><STRONG><a name="[5a]"></a>HAL_ADC_ConvCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_ConvCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAConvCplt
</UL>

<P><STRONG><a name="[5c]"></a>HAL_ADC_ConvHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_ConvHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAHalfConvCplt
</UL>

<P><STRONG><a name="[5b]"></a>HAL_ADC_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAError
</UL>

<P><STRONG><a name="[60]"></a>HAL_ADC_Init</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init()
</UL>

<P><STRONG><a name="[61]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, stm32f1xx_hal_msp.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler()
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[65]"></a>HAL_ADC_Start</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_ADC_Start &rArr; ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>HAL_ADC_Start_DMA</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_Start_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_ADC_Start_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5e]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 616 bytes, Stack size 40 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[63]"></a>HAL_DMA_Init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[67]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
</UL>

<P><STRONG><a name="[69]"></a>HAL_Delay</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init(__SPI_HandleTypeDef*, RF_InitTypeDef*)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_TransmitMode(__SPI_HandleTypeDef*, unsigned char*)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReceiveMode(__SPI_HandleTypeDef*, unsigned char*)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initADXL345()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkBMX055()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBMX055()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlinkRease(int, bool)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlinkDelay(int, int)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_isDeviceReady(unsigned char)
</UL>

<P><STRONG><a name="[6a]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, main.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[5f]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[62]"></a>HAL_GPIO_Init</STRONG> (Thumb, 408 bytes, Stack size 40 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[6b]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[d4]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedToggle()
</UL>

<P><STRONG><a name="[8e]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOff()
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_CE_LOW()
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_NSS_HIGH()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_NSS_LOW()
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_CE_HIGH()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOn()
</UL>

<P><STRONG><a name="[59]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blink(int)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetMicros()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef*, unsigned)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef*, unsigned)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_IsDeviceReady
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop_Disable
</UL>

<P><STRONG><a name="[6c]"></a>HAL_I2C_Init</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, stm32f1xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C2_Init()
</UL>

<P><STRONG><a name="[6f]"></a>HAL_I2C_IsDeviceReady</STRONG> (Thumb, 320 bytes, Stack size 56 bytes, stm32f1xx_hal_i2c.o(i.HAL_I2C_IsDeviceReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_isDeviceReady(unsigned char)
</UL>

<P><STRONG><a name="[71]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 462 bytes, Stack size 40 bytes, stm32f1xx_hal_i2c.o(i.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned) &rArr; I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef*, unsigned)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readData(unsigned char, unsigned char, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[74]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, stm32f1xx_hal_i2c.o(i.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned) &rArr; I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef*, unsigned)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writeRegisterByte(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[6d]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, stm32f1xx_hal_msp.o(i.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[89]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[77]"></a>HAL_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f1xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_Init &rArr; HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[79]"></a>HAL_InitTick</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f1xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[7a]"></a>HAL_MspInit</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, stm32f1xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[e3]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[78]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[7f]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[80]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 374 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[7b]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[6e]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[81]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 104 bytes, Stack size 28 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[82]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1406 bytes, Stack size 40 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[83]"></a>HAL_SPI_Init</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, stm32f1xx_hal_spi_ex.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init()
</UL>

<P><STRONG><a name="[84]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, stm32f1xx_hal_msp.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[85]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 686 bytes, Stack size 32 bytes, stm32f1xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte(__SPI_HandleTypeDef*, unsigned char)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadByte(__SPI_HandleTypeDef*, unsigned char)
</UL>

<P><STRONG><a name="[c6]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[88]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[7c]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[87]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[e6]"></a>SetPacketCrc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb.o(i.SetPacketCrc))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SystemInit</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_stm32f1xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(.text)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>BlinkDelay(int, int)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, led.o(i._Z10BlinkDelayii))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BlinkDelay(int, int) &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedToggle()
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkL3G4200D()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkHMC5883L()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkITG3200()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkADXL345()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkBMX055()
</UL>

<P><STRONG><a name="[c3]"></a>BlinkRease(int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, led.o(i._Z10BlinkReasei))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_isDeviceReady(unsigned char)
</UL>

<P><STRONG><a name="[8c]"></a>BlinkRease(int, bool)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, led.o(i._Z10BlinkReaseib))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BlinkRease(int, bool) &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedToggle()
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler()
</UL>

<P><STRONG><a name="[8d]"></a>RF_CE_HIGH()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf24l01.o(i._Z10RF_CE_HIGHv))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init(__SPI_HandleTypeDef*, RF_InitTypeDef*)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_TransmitMode(__SPI_HandleTypeDef*, unsigned char*)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SendPayload(__SPI_HandleTypeDef*, unsigned char*, unsigned char)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReceiveMode(__SPI_HandleTypeDef*, unsigned char*)
</UL>

<P><STRONG><a name="[8f]"></a>RF_NSS_LOW()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrf24l01.o(i._Z10RF_NSS_LOWv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RF_NSS_LOW() &rArr; HAL_MicroDelay(unsigned long long) &rArr; HAL_GetMicros() &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MicroDelay(unsigned long long)
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReceivePayload(__SPI_HandleTypeDef*, unsigned char*, unsigned char)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SendPayload(__SPI_HandleTypeDef*, unsigned char*, unsigned char)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Flush(__SPI_HandleTypeDef*, unsigned char)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Send_Adrs(__SPI_HandleTypeDef*, unsigned char, unsigned char*)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Send_Cmd(__SPI_HandleTypeDef*, unsigned char, unsigned char)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Read_Cmd(__SPI_HandleTypeDef*, unsigned char)
</UL>

<P><STRONG><a name="[91]"></a>initBMX055()</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, bmx055.o(i._Z10initBMX055v))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = initBMX055() &rArr; trimBMX055() &rArr; i2c_readRegister(unsigned char, unsigned char, unsigned char*) &rArr; i2c_readData(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned) &rArr; I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trimBMX055()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writeRegisterByte(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSensors()
</UL>

<P><STRONG><a name="[93]"></a>trimBMX055()</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, bmx055.o(i._Z10trimBMX055v))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = trimBMX055() &rArr; i2c_readRegister(unsigned char, unsigned char, unsigned char*) &rArr; i2c_readData(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned) &rArr; I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readRegister(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readData(unsigned char, unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBMX055()
</UL>

<P><STRONG><a name="[96]"></a>RF_NSS_HIGH()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf24l01.o(i._Z11RF_NSS_HIGHv))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReceivePayload(__SPI_HandleTypeDef*, unsigned char*, unsigned char)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SendPayload(__SPI_HandleTypeDef*, unsigned char*, unsigned char)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Flush(__SPI_HandleTypeDef*, unsigned char)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Send_Adrs(__SPI_HandleTypeDef*, unsigned char, unsigned char*)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Send_Cmd(__SPI_HandleTypeDef*, unsigned char, unsigned char)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Read_Cmd(__SPI_HandleTypeDef*, unsigned char)
</UL>

<P><STRONG><a name="[97]"></a>RF_Read_Cmd(__SPI_HandleTypeDef*, unsigned char)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nrf24l01.o(i._Z11RF_Read_CmdP19__SPI_HandleTypeDefh))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = RF_Read_Cmd(__SPI_HandleTypeDef*, unsigned char) &rArr; RF_NSS_LOW() &rArr; HAL_MicroDelay(unsigned long long) &rArr; HAL_GetMicros() &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte(__SPI_HandleTypeDef*, unsigned char)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadByte(__SPI_HandleTypeDef*, unsigned char)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_NSS_HIGH()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_NSS_LOW()
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReceivePayload(__SPI_HandleTypeDef*, unsigned char*, unsigned char)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_TransmitMode(__SPI_HandleTypeDef*, unsigned char*)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReceiveMode(__SPI_HandleTypeDef*, unsigned char*)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_FifoStatus(__SPI_HandleTypeDef*)
</UL>

<P><STRONG><a name="[9a]"></a>RF_Send_Cmd(__SPI_HandleTypeDef*, unsigned char, unsigned char)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, nrf24l01.o(i._Z11RF_Send_CmdP19__SPI_HandleTypeDefhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = RF_Send_Cmd(__SPI_HandleTypeDef*, unsigned char, unsigned char) &rArr; RF_NSS_LOW() &rArr; HAL_MicroDelay(unsigned long long) &rArr; HAL_GetMicros() &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte(__SPI_HandleTypeDef*, unsigned char)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadByte(__SPI_HandleTypeDef*, unsigned char)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_NSS_HIGH()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_NSS_LOW()
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init(__SPI_HandleTypeDef*, RF_InitTypeDef*)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_TransmitMode(__SPI_HandleTypeDef*, unsigned char*)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReceiveMode(__SPI_HandleTypeDef*, unsigned char*)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_IRQ_CLEAR(__SPI_HandleTypeDef*, unsigned char)
</UL>

<P><STRONG><a name="[9b]"></a>checkBMX055()</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, bmx055.o(i._Z11checkBMX055v))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = checkBMX055() &rArr; i2c_writeRegisterByte(unsigned char, unsigned char, unsigned char) &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned) &rArr; I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOff()
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlinkDelay(int, int)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writeRegisterByte(unsigned char, unsigned char, unsigned char)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_isDeviceReady(unsigned char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readRegister(unsigned char, unsigned char, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSensors()
</UL>

<P><STRONG><a name="[9e]"></a>initADXL345()</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, adxl345.o(i._Z11initADXL345v))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = initADXL345() &rArr; i2c_writeRegisterByte(unsigned char, unsigned char, unsigned char) &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned) &rArr; I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writeRegisterByte(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSensors()
</UL>

<P><STRONG><a name="[9f]"></a>initITG3200()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, itg3200.o(i._Z11initITG3200v))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = initITG3200() &rArr; i2c_writeRegisterByte(unsigned char, unsigned char, unsigned char) &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned) &rArr; I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writeRegisterByte(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSensors()
</UL>

<P><STRONG><a name="[a0]"></a>initSensors()</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, main.o(i._Z11initSensorsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = initSensors() &rArr; initBMX055() &rArr; trimBMX055() &rArr; i2c_readRegister(unsigned char, unsigned char, unsigned char*) &rArr; i2c_readData(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned) &rArr; I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkL3G4200D()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkHMC5883L()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initL3G4200D()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initHMC5883L()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkITG3200()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkADXL345()
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initITG3200()
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initADXL345()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkBMX055()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBMX055()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMres()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGres()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAres()
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[aa]"></a>readMagData(short*)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, main.o(i._Z11readMagDataPs))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = readMagData(short*) &rArr; readBMX055DataMag(short*) &rArr; i2c_readData(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned) &rArr; I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBMX055DataMag(short*)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readHMC5883LData(short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b2]"></a>RF_IRQ_CLEAR(__SPI_HandleTypeDef*, unsigned char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf24l01.o(i._Z12RF_IRQ_CLEARP19__SPI_HandleTypeDefh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = RF_IRQ_CLEAR(__SPI_HandleTypeDef*, unsigned char) &rArr; RF_Send_Cmd(__SPI_HandleTypeDef*, unsigned char, unsigned char) &rArr; RF_NSS_LOW() &rArr; HAL_MicroDelay(unsigned long long) &rArr; HAL_GetMicros() &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Send_Cmd(__SPI_HandleTypeDef*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init(__SPI_HandleTypeDef*, RF_InitTypeDef*)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReceivePayload(__SPI_HandleTypeDef*, unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[b3]"></a>RF_Send_Adrs(__SPI_HandleTypeDef*, unsigned char, unsigned char*)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, nrf24l01.o(i._Z12RF_Send_AdrsP19__SPI_HandleTypeDefhPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = RF_Send_Adrs(__SPI_HandleTypeDef*, unsigned char, unsigned char*) &rArr; RF_NSS_LOW() &rArr; HAL_MicroDelay(unsigned long long) &rArr; HAL_GetMicros() &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte(__SPI_HandleTypeDef*, unsigned char)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_NSS_HIGH()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_NSS_LOW()
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init(__SPI_HandleTypeDef*, RF_InitTypeDef*)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_TransmitMode(__SPI_HandleTypeDef*, unsigned char*)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReceiveMode(__SPI_HandleTypeDef*, unsigned char*)
</UL>

<P><STRONG><a name="[99]"></a>SPI_ReadByte(__SPI_HandleTypeDef*, unsigned char)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, spilib.o(i._Z12SPI_ReadByteP19__SPI_HandleTypeDefh))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SPI_ReadByte(__SPI_HandleTypeDef*, unsigned char) &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReceivePayload(__SPI_HandleTypeDef*, unsigned char*, unsigned char)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Send_Cmd(__SPI_HandleTypeDef*, unsigned char, unsigned char)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Read_Cmd(__SPI_HandleTypeDef*, unsigned char)
</UL>

<P><STRONG><a name="[98]"></a>SPI_SendByte(__SPI_HandleTypeDef*, unsigned char)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, spilib.o(i._Z12SPI_SendByteP19__SPI_HandleTypeDefh))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SPI_SendByte(__SPI_HandleTypeDef*, unsigned char) &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SendPayload(__SPI_HandleTypeDef*, unsigned char*, unsigned char)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Flush(__SPI_HandleTypeDef*, unsigned char)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Send_Adrs(__SPI_HandleTypeDef*, unsigned char, unsigned char*)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Send_Cmd(__SPI_HandleTypeDef*, unsigned char, unsigned char)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Read_Cmd(__SPI_HandleTypeDef*, unsigned char)
</UL>

<P><STRONG><a name="[a1]"></a>checkADXL345()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, adxl345.o(i._Z12checkADXL345v))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = checkADXL345() &rArr; i2c_readRegister(unsigned char, unsigned char, unsigned char*) &rArr; i2c_readData(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned) &rArr; I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOff()
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlinkDelay(int, int)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_isDeviceReady(unsigned char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readRegister(unsigned char, unsigned char, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSensors()
</UL>

<P><STRONG><a name="[a6]"></a>checkITG3200()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, itg3200.o(i._Z12checkITG3200v))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = checkITG3200() &rArr; i2c_readRegister(unsigned char, unsigned char, unsigned char*) &rArr; i2c_readData(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned) &rArr; I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOff()
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlinkDelay(int, int)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_isDeviceReady(unsigned char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readRegister(unsigned char, unsigned char, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSensors()
</UL>

<P><STRONG><a name="[95]"></a>i2c_readData(unsigned char, unsigned char, unsigned char*, unsigned short)</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, i2c.o(i._Z12i2c_readDatahhPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = i2c_readData(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned) &rArr; I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBMX055DataAccel(short*)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBMX055DataGyro(short*)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBMX055DataMag(short*)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readL3G4200DData(short*)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readHMC5883LData(short*)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readITG3200Data(short*)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readADXL345Data(short*)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trimBMX055()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readRegister(unsigned char, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[a3]"></a>initHMC5883L()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hmc5883l.o(i._Z12initHMC5883Lv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = initHMC5883L() &rArr; i2c_writeRegisterByte(unsigned char, unsigned char, unsigned char) &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned) &rArr; I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writeRegisterByte(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSensors()
</UL>

<P><STRONG><a name="[a5]"></a>initL3G4200D()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, l3g4200d.o(i._Z12initL3G4200Dv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = initL3G4200D() &rArr; i2c_writeRegisterByte(unsigned char, unsigned char, unsigned char) &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned) &rArr; I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writeRegisterByte(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSensors()
</UL>

<P><STRONG><a name="[b4]"></a>readGyroData(short*)</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, main.o(i._Z12readGyroDataPs))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = readGyroData(short*) &rArr; readL3G4200DData(short*) &rArr; i2c_readRegister(unsigned char, unsigned char, unsigned char*) &rArr; i2c_readData(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned) &rArr; I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBMX055DataGyro(short*)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readL3G4200DData(short*)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readITG3200Data(short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>Error_Handler()</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, main.o(i._Z13Error_Handlerv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Error_Handler() &rArr; BlinkRease(int, bool) &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOff()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlinkRease(int, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C2_Init()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init()
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[b8]"></a>HAL_GetMicros()</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, main.o(i._Z13HAL_GetMicrosv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_GetMicros() &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MicroDelay(unsigned long long)
</UL>

<P><STRONG><a name="[b9]"></a>RF_FifoStatus(__SPI_HandleTypeDef*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf24l01.o(i._Z13RF_FifoStatusP19__SPI_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = RF_FifoStatus(__SPI_HandleTypeDef*) &rArr; RF_Read_Cmd(__SPI_HandleTypeDef*, unsigned char) &rArr; RF_NSS_LOW() &rArr; HAL_MicroDelay(unsigned long long) &rArr; HAL_GetMicros() &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Read_Cmd(__SPI_HandleTypeDef*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a2]"></a>checkHMC5883L()</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, hmc5883l.o(i._Z13checkHMC5883Lv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = checkHMC5883L() &rArr; i2c_readRegister(unsigned char, unsigned char, unsigned char*) &rArr; i2c_readData(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned) &rArr; I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOff()
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlinkDelay(int, int)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_isDeviceReady(unsigned char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readRegister(unsigned char, unsigned char, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSensors()
</UL>

<P><STRONG><a name="[a4]"></a>checkL3G4200D()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, l3g4200d.o(i._Z13checkL3G4200Dv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = checkL3G4200D() &rArr; i2c_readRegister(unsigned char, unsigned char, unsigned char*) &rArr; i2c_readData(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned) &rArr; I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOff()
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlinkDelay(int, int)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_isDeviceReady(unsigned char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readRegister(unsigned char, unsigned char, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSensors()
</UL>

<P><STRONG><a name="[ce]"></a>getADXL345res()</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, adxl345.o(i._Z13getADXL345resv))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAres()
</UL>

<P><STRONG><a name="[d1]"></a>getITG3200res()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, itg3200.o(i._Z13getITG3200resv))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGres()
</UL>

<P><STRONG><a name="[ba]"></a>readAccelData(short*)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, main.o(i._Z13readAccelDataPs))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = readAccelData(short*) &rArr; readADXL345Data(short*) &rArr; i2c_readRegister(unsigned char, unsigned char, unsigned char*) &rArr; i2c_readData(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned) &rArr; I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBMX055DataAccel(short*)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readADXL345Data(short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[90]"></a>HAL_MicroDelay(unsigned long long)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, main.o(i._Z14HAL_MicroDelayy))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_MicroDelay(unsigned long long) &rArr; HAL_GetMicros() &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetMicros()
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_NSS_LOW()
</UL>

<P><STRONG><a name="[bd]"></a>RF_ReceiveMode(__SPI_HandleTypeDef*, unsigned char*)</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, nrf24l01.o(i._Z14RF_ReceiveModeP19__SPI_HandleTypeDefPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = RF_ReceiveMode(__SPI_HandleTypeDef*, unsigned char*) &rArr; RF_Send_Adrs(__SPI_HandleTypeDef*, unsigned char, unsigned char*) &rArr; RF_NSS_LOW() &rArr; HAL_MicroDelay(unsigned long long) &rArr; HAL_GetMicros() &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_CE_LOW()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Flush(__SPI_HandleTypeDef*, unsigned char)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Send_Adrs(__SPI_HandleTypeDef*, unsigned char, unsigned char*)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Send_Cmd(__SPI_HandleTypeDef*, unsigned char, unsigned char)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Read_Cmd(__SPI_HandleTypeDef*, unsigned char)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_CE_HIGH()
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c0]"></a>RF_SendPayload(__SPI_HandleTypeDef*, unsigned char*, unsigned char)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, nrf24l01.o(i._Z14RF_SendPayloadP19__SPI_HandleTypeDefPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = RF_SendPayload(__SPI_HandleTypeDef*, unsigned char*, unsigned char) &rArr; RF_NSS_LOW() &rArr; HAL_MicroDelay(unsigned long long) &rArr; HAL_GetMicros() &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte(__SPI_HandleTypeDef*, unsigned char)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_NSS_HIGH()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_NSS_LOW()
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_CE_HIGH()
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d3]"></a>getHMC5883Lres()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hmc5883l.o(i._Z14getHMC5883Lresv))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMres()
</UL>

<P><STRONG><a name="[d0]"></a>getL3G4200Dres()</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, l3g4200d.o(i._Z14getL3G4200Dresv))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGres()
</UL>

<P><STRONG><a name="[c1]"></a>RF_TransmitMode(__SPI_HandleTypeDef*, unsigned char*)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, nrf24l01.o(i._Z15RF_TransmitModeP19__SPI_HandleTypeDefPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = RF_TransmitMode(__SPI_HandleTypeDef*, unsigned char*) &rArr; RF_Send_Adrs(__SPI_HandleTypeDef*, unsigned char, unsigned char*) &rArr; RF_NSS_LOW() &rArr; HAL_MicroDelay(unsigned long long) &rArr; HAL_GetMicros() &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_CE_LOW()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Flush(__SPI_HandleTypeDef*, unsigned char)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Send_Adrs(__SPI_HandleTypeDef*, unsigned char, unsigned char*)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Send_Cmd(__SPI_HandleTypeDef*, unsigned char, unsigned char)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Read_Cmd(__SPI_HandleTypeDef*, unsigned char)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_CE_HIGH()
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d2]"></a>getBMX055resMag()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bmx055.o(i._Z15getBMX055resMagv))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMres()
</UL>

<P><STRONG><a name="[bc]"></a>readADXL345Data(short*)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, adxl345.o(i._Z15readADXL345DataPs))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = readADXL345Data(short*) &rArr; i2c_readRegister(unsigned char, unsigned char, unsigned char*) &rArr; i2c_readData(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned) &rArr; I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readRegister(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readData(unsigned char, unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readAccelData(short*)
</UL>

<P><STRONG><a name="[b7]"></a>readITG3200Data(short*)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, itg3200.o(i._Z15readITG3200DataPs))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = readITG3200Data(short*) &rArr; i2c_readData(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned) &rArr; I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readData(unsigned char, unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readGyroData(short*)
</UL>

<P><STRONG><a name="[cf]"></a>getBMX055resGyro()</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, bmx055.o(i._Z16getBMX055resGyrov))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGres()
</UL>

<P><STRONG><a name="[94]"></a>i2c_readRegister(unsigned char, unsigned char, unsigned char*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2c.o(i._Z16i2c_readRegisterhhPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = i2c_readRegister(unsigned char, unsigned char, unsigned char*) &rArr; i2c_readData(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned) &rArr; I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readData(unsigned char, unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readL3G4200DData(short*)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readHMC5883LData(short*)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readADXL345Data(short*)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkL3G4200D()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkHMC5883L()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkITG3200()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkADXL345()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkBMX055()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trimBMX055()
</UL>

<P><STRONG><a name="[ac]"></a>readHMC5883LData(short*)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, hmc5883l.o(i._Z16readHMC5883LDataPs))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = readHMC5883LData(short*) &rArr; i2c_readRegister(unsigned char, unsigned char, unsigned char*) &rArr; i2c_readData(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned) &rArr; I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readRegister(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readData(unsigned char, unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMagData(short*)
</UL>

<P><STRONG><a name="[b6]"></a>readL3G4200DData(short*)</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, l3g4200d.o(i._Z16readL3G4200DDataPs))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = readL3G4200DData(short*) &rArr; i2c_readRegister(unsigned char, unsigned char, unsigned char*) &rArr; i2c_readData(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned) &rArr; I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readRegister(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readData(unsigned char, unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readGyroData(short*)
</UL>

<P><STRONG><a name="[c2]"></a>RF_ReceivePayload(__SPI_HandleTypeDef*, unsigned char*, unsigned char)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, nrf24l01.o(i._Z17RF_ReceivePayloadP19__SPI_HandleTypeDefPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = RF_ReceivePayload(__SPI_HandleTypeDef*, unsigned char*, unsigned char) &rArr; RF_IRQ_CLEAR(__SPI_HandleTypeDef*, unsigned char) &rArr; RF_Send_Cmd(__SPI_HandleTypeDef*, unsigned char, unsigned char) &rArr; RF_NSS_LOW() &rArr; HAL_MicroDelay(unsigned long long) &rArr; HAL_GetMicros() &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadByte(__SPI_HandleTypeDef*, unsigned char)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_IRQ_CLEAR(__SPI_HandleTypeDef*, unsigned char)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Read_Cmd(__SPI_HandleTypeDef*, unsigned char)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_NSS_HIGH()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_NSS_LOW()
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cd]"></a>getBMX055resAccel()</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, bmx055.o(i._Z17getBMX055resAccelv))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAres()
</UL>

<P><STRONG><a name="[9d]"></a>i2c_isDeviceReady(unsigned char)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, i2c.o(i._Z17i2c_isDeviceReadyh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = i2c_isDeviceReady(unsigned char) &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlinkRease(int)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOn()
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_IsDeviceReady
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkL3G4200D()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkHMC5883L()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkITG3200()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkADXL345()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkBMX055()
</UL>

<P><STRONG><a name="[ab]"></a>readBMX055DataMag(short*)</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, bmx055.o(i._Z17readBMX055DataMagPs))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = readBMX055DataMag(short*) &rArr; i2c_readData(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned) &rArr; I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readData(unsigned char, unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMagData(short*)
</UL>

<P><STRONG><a name="[c5]"></a>SystemClock_Config()</STRONG> (Thumb, 114 bytes, Stack size 88 bytes, main.o(i._Z18SystemClock_Configv))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = SystemClock_Config() &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler()
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5]"></a>readBMX055DataGyro(short*)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bmx055.o(i._Z18readBMX055DataGyroPs))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = readBMX055DataGyro(short*) &rArr; i2c_readData(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned) &rArr; I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readData(unsigned char, unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readGyroData(short*)
</UL>

<P><STRONG><a name="[bb]"></a>readBMX055DataAccel(short*)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, bmx055.o(i._Z19readBMX055DataAccelPs))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = readBMX055DataAccel(short*) &rArr; i2c_readData(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned) &rArr; I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readData(unsigned char, unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readAccelData(short*)
</UL>

<P><STRONG><a name="[92]"></a>i2c_writeRegisterByte(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, i2c.o(i._Z21i2c_writeRegisterBytehhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = i2c_writeRegisterByte(unsigned char, unsigned char, unsigned char) &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned) &rArr; I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initL3G4200D()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initHMC5883L()
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initITG3200()
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initADXL345()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkBMX055()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBMX055()
</UL>

<P><STRONG><a name="[c8]"></a>TrackedDevice_NRF24L01_Init()</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, main.o(i._Z27TrackedDevice_NRF24L01_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TrackedDevice_NRF24L01_Init() &rArr; RF_Init(__SPI_HandleTypeDef*, RF_InitTypeDef*) &rArr; RF_Send_Adrs(__SPI_HandleTypeDef*, unsigned char, unsigned char*) &rArr; RF_NSS_LOW() &rArr; HAL_MicroDelay(unsigned long long) &rArr; HAL_GetMicros() &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init(__SPI_HandleTypeDef*, RF_InitTypeDef*)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cc]"></a>Blink(int)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, led.o(i._Z5Blinki))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Blink(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedToggle()
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c4]"></a>LedOn()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, led.o(i._Z5LedOnv))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_isDeviceReady(unsigned char)
</UL>

<P><STRONG><a name="[9c]"></a>LedOff()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, led.o(i._Z6LedOffv))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkL3G4200D()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkHMC5883L()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkITG3200()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkADXL345()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkBMX055()
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler()
</UL>

<P><STRONG><a name="[ca]"></a>RF_Init(__SPI_HandleTypeDef*, RF_InitTypeDef*)</STRONG> (Thumb, 380 bytes, Stack size 16 bytes, nrf24l01.o(i._Z7RF_InitP19__SPI_HandleTypeDefP14RF_InitTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = RF_Init(__SPI_HandleTypeDef*, RF_InitTypeDef*) &rArr; RF_Send_Adrs(__SPI_HandleTypeDef*, unsigned char, unsigned char*) &rArr; RF_NSS_LOW() &rArr; HAL_MicroDelay(unsigned long long) &rArr; HAL_GetMicros() &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_CE_LOW()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Flush(__SPI_HandleTypeDef*, unsigned char)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Send_Adrs(__SPI_HandleTypeDef*, unsigned char, unsigned char*)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_IRQ_CLEAR(__SPI_HandleTypeDef*, unsigned char)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Send_Cmd(__SPI_HandleTypeDef*, unsigned char, unsigned char)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_CE_HIGH()
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackedDevice_NRF24L01_Init()
</UL>

<P><STRONG><a name="[a7]"></a>getAres()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(i._Z7getAresv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getAres()
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBMX055resAccel()
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getADXL345res()
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSensors()
</UL>

<P><STRONG><a name="[a8]"></a>getGres()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, main.o(i._Z7getGresv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getGres()
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBMX055resGyro()
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getL3G4200Dres()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getITG3200res()
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSensors()
</UL>

<P><STRONG><a name="[a9]"></a>getMres()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(i._Z7getMresv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getMres()
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBMX055resMag()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHMC5883Lres()
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSensors()
</UL>

<P><STRONG><a name="[bf]"></a>RF_Flush(__SPI_HandleTypeDef*, unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nrf24l01.o(i._Z8RF_FlushP19__SPI_HandleTypeDefh))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = RF_Flush(__SPI_HandleTypeDef*, unsigned char) &rArr; RF_NSS_LOW() &rArr; HAL_MicroDelay(unsigned long long) &rArr; HAL_GetMicros() &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte(__SPI_HandleTypeDef*, unsigned char)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_NSS_HIGH()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_NSS_LOW()
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init(__SPI_HandleTypeDef*, RF_InitTypeDef*)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_TransmitMode(__SPI_HandleTypeDef*, unsigned char*)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReceiveMode(__SPI_HandleTypeDef*, unsigned char*)
</UL>

<P><STRONG><a name="[8b]"></a>LedToggle()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, led.o(i._Z9LedTogglev))
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blink(int)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlinkRease(int, bool)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlinkDelay(int, int)
</UL>

<P><STRONG><a name="[be]"></a>RF_CE_LOW()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf24l01.o(i._Z9RF_CE_LOWv))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init(__SPI_HandleTypeDef*, RF_InitTypeDef*)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_TransmitMode(__SPI_HandleTypeDef*, unsigned char*)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReceiveMode(__SPI_HandleTypeDef*, unsigned char*)
</UL>

<P><STRONG><a name="[d6]"></a>Quaternion::Quaternion(const Quaternion&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, quaternion.o(i._ZN10QuaternionC1ERKS_))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::operator =(const Quaternion&)
</UL>

<P><STRONG><a name="[f9]"></a>Quaternion::Quaternion__sub_object(const Quaternion&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, quaternion.o(i._ZN10QuaternionC1ERKS_), UNUSED)

<P><STRONG><a name="[e0]"></a>Quaternion::Quaternion()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, quaternion.o(i._ZN10QuaternionC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSensorFusion::CSensorFusion(float, float, float)
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSensorFusion::Value()
</UL>

<P><STRONG><a name="[fa]"></a>Quaternion::Quaternion__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, quaternion.o(i._ZN10QuaternionC1Ev), UNUSED)

<P><STRONG><a name="[e2]"></a>Quaternion::~Quaternion()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, quaternion.o(i._ZN10QuaternionD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSensorFusion::CSensorFusion(float, float, float)
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fb]"></a>Quaternion::~Quaternion__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, quaternion.o(i._ZN10QuaternionD1Ev), UNUSED)

<P><STRONG><a name="[d5]"></a>Quaternion::operator =(const Quaternion&)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, quaternion.o(i._ZN10QuaternionaSERKS_))
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Quaternion(const Quaternion&)
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSensorFusion::CSensorFusion(float, float, float)
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d7]"></a>CSensorFusion::MadgwickQuaternionUpdate(float, float, float, float, float, float, float, float, float, float)</STRONG> (Thumb, 3108 bytes, Stack size 264 bytes, sensorfusion.o(i._ZN13CSensorFusion24MadgwickQuaternionUpdateEffffffffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = CSensorFusion::MadgwickQuaternionUpdate(float, float, float, float, float, float, float, float, float, float) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sqrt(float)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSensorFusion::Fuse(SensorData*)
</UL>

<P><STRONG><a name="[de]"></a>CSensorFusion::Fuse(SensorData*)</STRONG> (Thumb, 268 bytes, Stack size 80 bytes, sensorfusion.o(i._ZN13CSensorFusion4FuseEP10SensorData))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = CSensorFusion::Fuse(SensorData*) &rArr; CSensorFusion::MadgwickQuaternionUpdate(float, float, float, float, float, float, float, float, float, float) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSensorFusion::Value()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSensorFusion::MadgwickQuaternionUpdate(float, float, float, float, float, float, float, float, float, float)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[df]"></a>CSensorFusion::Value()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sensorfusion.o(i._ZN13CSensorFusion5ValueEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CSensorFusion::Value()
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Quaternion()
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSensorFusion::Fuse(SensorData*)
</UL>

<P><STRONG><a name="[e1]"></a>CSensorFusion::CSensorFusion(float, float, float)</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, sensorfusion.o(i._ZN13CSensorFusionC1Efff))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CSensorFusion::CSensorFusion(float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::operator =(const Quaternion&)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::~Quaternion()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Quaternion()
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fc]"></a>CSensorFusion::CSensorFusion__sub_object(float, float, float)</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, sensorfusion.o(i._ZN13CSensorFusionC1Efff), UNUSED)

<P><STRONG><a name="[dd]"></a>std::sqrt(float)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sensorfusion.o(i._ZSt4sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = std::sqrt(float) &rArr; sqrtf &rArr; _fsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSensorFusion::MadgwickQuaternionUpdate(float, float, float, float, float, float, float, float, float, float)
</UL>

<P><STRONG><a name="[fd]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[fe]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[ff]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[e8]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>

<P><STRONG><a name="[35]"></a>main</STRONG> (Thumb, 1242 bytes, Stack size 120 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = main &rArr; CSensorFusion::Fuse(SensorData*) &rArr; CSensorFusion::MadgwickQuaternionUpdate(float, float, float, float, float, float, float, float, float, float) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2f
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSensorFusion::CSensorFusion(float, float, float)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSensorFusion::Fuse(SensorData*)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::operator =(const Quaternion&)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::~Quaternion()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Quaternion()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOff()
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blink(int)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReceivePayload(__SPI_HandleTypeDef*, unsigned char*, unsigned char)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_TransmitMode(__SPI_HandleTypeDef*, unsigned char*)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SendPayload(__SPI_HandleTypeDef*, unsigned char*, unsigned char)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReceiveMode(__SPI_HandleTypeDef*, unsigned char*)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_FifoStatus(__SPI_HandleTypeDef*)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlinkRease(int)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPacketCrc
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackedDevice_NRF24L01_Init()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readAccelData(short*)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetMicros()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readGyroData(short*)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMagData(short*)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSensors()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C2_Init()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init()
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler()
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[dc]"></a>sqrtf</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sqrtf &rArr; _fsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sqrt(float)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSensorFusion::MadgwickQuaternionUpdate(float, float, float, float, float, float, float, float, float, float)
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[ad]"></a>MX_ADC1_Init()</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, main.o(i._Z12MX_ADC1_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_ADC1_Init() &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler()
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[af]"></a>MX_GPIO_Init()</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, main.o(i._Z12MX_GPIO_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_GPIO_Init() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b0]"></a>MX_I2C2_Init()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i._Z12MX_I2C2_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_I2C2_Init() &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler()
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b1]"></a>MX_SPI2_Init()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, main.o(i._Z12MX_SPI2_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_SPI2_Init() &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler()
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[72]"></a>I2C_RequestMemoryRead(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned)</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, stm32f1xx_hal_i2c.o(i._Z21I2C_RequestMemoryReadP17I2C_HandleTypeDeftttj))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = I2C_RequestMemoryRead(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned) &rArr; I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef*, unsigned)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[75]"></a>I2C_RequestMemoryWrite(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned)</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, stm32f1xx_hal_i2c.o(i._Z22I2C_RequestMemoryWriteP17I2C_HandleTypeDeftttj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryWrite(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned) &rArr; I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef*, unsigned)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[cb]"></a>I2C_IsAcknowledgeFailed(I2C_HandleTypeDef*)</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(i._Z23I2C_IsAcknowledgeFailedP17I2C_HandleTypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef*, unsigned)
</UL>

<P><STRONG><a name="[70]"></a>I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned)</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, stm32f1xx_hal_i2c.o(i._Z26I2C_WaitOnFlagUntilTimeoutP17I2C_HandleTypeDefj10FlagStatusj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_IsDeviceReady
</UL>

<P><STRONG><a name="[76]"></a>I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef*, unsigned)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f1xx_hal_i2c.o(i._Z29I2C_WaitOnTXEFlagUntilTimeoutP17I2C_HandleTypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed(I2C_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[73]"></a>I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef*, unsigned)</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, stm32f1xx_hal_i2c.o(i._Z30I2C_WaitOnRXNEFlagUntilTimeoutP17I2C_HandleTypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[c7]"></a>I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned)</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, stm32f1xx_hal_i2c.o(i._Z39I2C_WaitOnMasterAddressFlagUntilTimeoutP17I2C_HandleTypeDefjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned)
</UL>

<P><STRONG><a name="[68]"></a>DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f1xx_hal_dma.o(i._Z13DMA_SetConfigP19__DMA_HandleTypeDefjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[86]"></a>SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, stm32f1xx_hal_spi.o(i._Z26SPI_WaitOnFlagUntilTimeoutP19__SPI_HandleTypeDefj10FlagStatusj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[7e]"></a>NVIC_SetPriority(IRQn_Type, unsigned)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i._Z16NVIC_SetPriority9IRQn_Typej))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
